#!/usr/bin/perl

# Copyright (c) 2011 Todd T. Fries <todd@fries.net>
#
# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

use strict;
use warnings;

my $verbose = 0;
my $donothing = 0;
while ($#ARGV > -1) {
	if ($ARGV[0] eq "-v") {
		$verbose ++;
		shift @ARGV;
		next;
	}
	last;
}

if ($ARGV[0] eq "-n") {
	$donothing=1;
	shift @ARGV;
}

my $mdname=$ARGV[0];
my @dirs;
my @files;
my @symlinks;
my @hardlinks;

open(CT,"ct -tvf ${mdname}|");
while(<CT>) {
	my $line;
	chomp($line = $_);
	if ($line =~ m/^version: /) {
		next;
	}
	$line =~ m/^d[rwx\-]{9,9}\s+\S+\s+\S+\s+\S{3,3}\s+\S{3,3}\s+\d{1,2}\s+[\d:]{8,8}\s+\d{4,4}\s(.*)$/;
	if (defined($1)) {
		if ($verbose > 1) {
			printf "DIR! %s\n",$1;
		}
		if (! -d $1) {
			if ($verbose > 0) {
				printf "Queueing DIR: %s\n",$1;
			}
			push @dirs,$1;
		}
		next;
	}
	$line =~ m/^[rwx\-]{10,10}\s+\S+\s+\S+\s+\S{3,3}\s+\S{3,3}\s+\d{1,2}\s+[\d:]{8,8}\s+\d{4,4}\s(.*)\ssz:/;
	if (defined($1)) {
		if ($verbose > 1) {
			printf "FILE! %s\n",$1;
		}
		# XXX use regex to prune filename off, compare timing with and
		#     without the below
		#if (!grep {/^$1$/} @dirs) {
		#	push @files,$1;
		#}
			
		if (! -f "$1") {
			if ($verbose > 0) {
				printf "Queueing FILE: %s\n",$1;
			}
			push @files,$1;
		}
		next;
	}
	$line =~ m/^l[rwx\-]{9,9}\s+\S+\s+\S+\s+\S{3,3}\s+\S{3,3}\s+\d{1,2}\s+[\d:]{8,8}\s+\d{4,4}\s(.*)\s->/;
	if (defined($1)) {
		if ($verbose > 1) {
			printf "SYMLINK! %s\n",$1;
		}
		if (! -l "$1") {
			if ($verbose > 0) {
				printf "Queueing SYMLINK: %s\n",$1;
			}
			push @symlinks,$1;
		}
		next;
	}
	$line =~ m/^l[rwx\-]{9,9}\s+\S+\s+\S+\s+\S{3,3}\s+\S{3,3}\s+\d{1,2}\s+[\d:]{8,8}\s+\d{4,4}\s(.*)\s==/;
	if (defined($1)) {
		if ($verbose > 1) {
			printf "HARDLINK! %s\n",$1;
		}
		if (! -l "$1") {
			if ($verbose > 0) {
				printf "Queueing HARDLINK: %s\n",$1;
			}
			push @hardlinks,$1;
		}
		next;
	}
	printf "LINE: %s\n",$line;
	exit(0);
}
close(CT);
my $recoverargs;
foreach my $path ((@dirs,
		@files,
		@symlinks,
		@hardlinks)) {
	$recoverargs .= " ".$path;
	if ($verbose > 0) {
		printf "Extracting '%s'\n",$path;
	}
	if ($donothing == 0) {
		my $ret=system("ct -xvpf $mdname \"$path\"");
		if ($ret > 0) {
			exit($ret);
		}
	}
}
#print "system(\"ct -xvpf $recoverargs\");\n";
